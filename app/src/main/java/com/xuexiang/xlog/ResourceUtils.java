/*
 * Copyright (C) 2018 xuexiangjys(xuexiangjys@163.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
package com.xuexiang.xlog;

import android.content.Context;
import android.content.res.AssetManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.text.TextUtils;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author xuexiang
 * @date 2018/1/28 下午5:57
 */
public final class ResourceUtils {

	/**
	 * Don't let anyone instantiate this class.
	 */
	private ResourceUtils() {
		throw new Error("Do not need instantiate!");
	}

	/**
	 * get an asset using ACCESS_STREAMING mode. This provides access to files
	 * that have been bundled with an application as assets -- that is, files
	 * placed in to the "assets" directory.
	 * 
	 * @param context
	 * @param fileName
	 *            The name of the asset to open. This name can be hierarchical.
	 * @return
	 */
	public static String getFileFromAssets(Context context, String fileName, int size, boolean isNeedAddLine) {
		if (context == null || TextUtils.isEmpty(fileName)) {
			return null;
		}

		StringBuilder s = new StringBuilder("");
		try {
			InputStreamReader in = new InputStreamReader(context.getResources().getAssets().open(fileName));
			BufferedReader br = new BufferedReader(in, size);
			String line;
			if (isNeedAddLine) {
				while ((line = br.readLine()) != null) {
					s.append(line + "\n");
				}
			} else {
				while ((line = br.readLine()) != null) {
					s.append(line);
				}
			}

			return s.toString();
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * 将输入流转换成string
	 * 
	 * @param context
	 * @param fileName
	 * @param size
	 * @return
	 */
	public static String getFileFromAssets(Context context, String fileName, int size) {
		return getFileFromAssets(context, fileName, size, true);
	}

	/**
	 * 读取assert下的txt文件
	 * 
	 * @param context
	 * @param fileName
	 *            文件名
	 * @return
	 */
	public static String readStringFromAssert(Context context, String fileName) {
		String resultString = "";
		try {
			InputStream inputStream = context.getResources().getAssets().open(fileName);
			byte[] buffer = new byte[inputStream.available()];
			inputStream.read(buffer);
			resultString = new String(buffer, "utf-8");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return resultString;
	}

	/**
	 * 读取assert下的txt文件
	 * 
	 * @param context
	 * @param fileName
	 *            文件名
	 * @param encodingCode
	 *            字符编码
	 * @return
	 */
	public static String readStringFromAssert(Context context, String fileName, String encodingCode) {
		String resultString = "";
		try {
			InputStream inputStream = context.getResources().getAssets().open(fileName);
			byte[] buffer = new byte[inputStream.available()];
			inputStream.read(buffer);
			resultString = new String(buffer, encodingCode);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return resultString;
	}

	/**
	 * get an asset using ACCESS_STREAMING mode. This provides access to files
	 * that have been bundled with an application as assets -- that is, files
	 * placed in to the "assets" directory.
	 * 
	 * @param context
	 * @param fileName
	 *            The name of the asset to open. This name can be hierarchical.
	 * @return
	 */
	public static String getFileFromAssets(Context context, String fileName, boolean isNeedAddLine) {
		if (context == null || TextUtils.isEmpty(fileName)) {
			return null;
		}

		StringBuilder s = new StringBuilder("");
		try {
			InputStreamReader in = new InputStreamReader(context.getResources().getAssets().open(fileName));
			BufferedReader br = new BufferedReader(in);
			String line;
			if (isNeedAddLine) {
				while ((line = br.readLine()) != null) {
					s.append(line + "\n");
				}
			} else {
				while ((line = br.readLine()) != null) {
					s.append(line);
				}
			}

			return s.toString();
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * get content from a raw resource. This can only be used with resources
	 * whose value is the name of an asset files -- that is, it can be used to
	 * open drawable, sound, and raw resources; it will fail on string and color
	 * resources.
	 * 
	 * @param context
	 * @param resId
	 *            The resource identifier to open, as generated by the appt
	 *            tool.
	 * @return
	 */
	public static String geFileFromRaw(Context context, int resId) {
		if (context == null) {
			return null;
		}

		StringBuilder s = new StringBuilder();
		try {
			InputStreamReader in = new InputStreamReader(context.getResources().openRawResource(resId));
			BufferedReader br = new BufferedReader(in);
			String line;
			while ((line = br.readLine()) != null) {
				s.append(line);
			}
			return s.toString();
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * same to {@link ResourceUtils#geFileFromRaw(Context, int)}, but return
	 * type is List<String>
	 * 
	 * @param context
	 * @param resId
	 * @return
	 */
	public static List<String> geFileToListFromRaw(Context context, int resId) {
		if (context == null) {
			return null;
		}

		List<String> fileContent = new ArrayList<String>();
		BufferedReader reader = null;
		try {
			InputStreamReader in = new InputStreamReader(context.getResources().openRawResource(resId));
			reader = new BufferedReader(in);
			String line = null;
			while ((line = reader.readLine()) != null) {
				fileContent.add(line);
			}
			reader.close();
			return fileContent;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * 从Assets中读取图片
	 */
	public static Bitmap getImageFromAssetsFile(Context context, String fileName) {
		Bitmap image = null;
		AssetManager am = context.getResources().getAssets();
		try {
			InputStream is = am.open(fileName);
			image = BitmapFactory.decodeStream(is);
			is.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return image;
	}


}
